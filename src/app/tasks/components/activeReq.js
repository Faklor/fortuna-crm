import { useState, useEffect } from "react"
import '../scss/activeReq.scss'
import axios from "axios"
import Image from "next/image"
import { useRouter } from "next/navigation";
//------------component--------------
import CompleteReq from "./completeReq"
 

export default function ActiveReq({_id, index, dateBegin, urgency, obj, parts, setArrActive, arrActive, workers}){
    
    //navigation
    const router = useRouter()
    //react
    const [object, setObject] = useState(obj)
    const [partsOption, setPartsOptions] = useState([])
    const [err, setErr] = useState([])

    

    //functions
    async function getObj(_id){
        return await axios.post('/api/teches/object',{_id:_id})
    }
    async function getParts(partsArr){
        return await axios.post('/api/parts/optionParts', {partsArr:partsArr})
    }
    async function deleteReq(_id){
        return await axios.post('/api/requisition/deleteReq',{_id:_id})
    }
    async function sendCancelNotification(reqData, object, partsOption) {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∏ —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ä–æ—á–Ω–æ—Å—Ç–∏
        let urgencyEmoji;
        switch(reqData.urgency) {
            case '–°–†–û–ß–ù–ê–Ø':
                urgencyEmoji = 'üî¥';
                break;
            case '–°–†–ï–î–ù–ï–ô –°–†–û–ß–ù–û–°–¢–ò':
                urgencyEmoji = 'üü°';
                break;
            case '–ù–ï –°–†–û–ß–ù–ê–Ø':
                urgencyEmoji = 'üü¢';
                break;
            default:
                urgencyEmoji = '‚ö™';
        }

        const message = `
<b>‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞</b>

üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: ${reqData.dateBegin}
üè¢ –û–±—ä–µ–∫—Ç: ${object.name}
‚ö° –°—Ä–æ—á–Ω–æ—Å—Ç—å: ${urgencyEmoji} <code>${reqData.urgency}</code>

<b>–û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ –∑–∞–ø—á–∞—Å—Ç–∏:</b>
${partsOption.map(part => `‚Ä¢ ${part.countReq} ${part.description} ${part._doc.name}`).join('\n')}
`;

        return await axios.post('/api/telegram/sendNotification', { message, type: 'requests' });
    }

    function getColor(){
        if(urgency === '–ù–ï –°–†–û–ß–ù–ê–Ø'){
            return '#A9FF8F'
        }
        else if(urgency === '–°–†–ï–î–ù–ï–ô –°–†–û–ß–ù–û–°–¢–ò'){
            return '#FFE48D'
        }
        else if((urgency === '–°–†–û–ß–ù–ê–Ø')){
            return '#FF8181'
        }
    }

    useEffect(()=>{
        getObj(obj)
        .then(res=>{
            setObject(res.data)
        })
        .catch(e=>console.log(e))

        getParts(parts)
        .then(res=>{
            setPartsOptions(res.data)
        })
        .catch(e=>console.log(e))

    },[])

    

    return <div className="reqActive">
        <div style={{background:getColor()}} className="lineStatus"/>
        <div className="titleReq">
            <h2 style={{color:getColor()}}>–ó–∞—è–≤–∫–∞ ‚Ññ{index+1}</h2>

            <p>–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {dateBegin}</p>
            <p>–°—Ä–æ—á–Ω–æ—Å—Ç—å: {urgency}</p>
            <p>–û–±—ä–µ–∫—Ç: {object.name}</p>
        </div>
        
        <div className="contollers">
            <CompleteReq 
                partsOption={partsOption} 
                setErr={setErr}
                object={object}
                dateBegin={dateBegin}
                _id={_id}
                arrActive={arrActive}
                setArrActive={setArrActive}
                workers={workers}
            />
            <button>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å<Image src={'/components/edit.svg'} width={20} height={20} alt="completeReq"/></button>
            <button onClick={()=>{
                deleteReq(_id)
                .then(res=>{
                    sendCancelNotification(
                        { dateBegin, urgency },
                        object,
                        partsOption
                    ).catch(e => console.log('Failed to send cancel notification:', e));

                    arrActive.map((item,index)=>{
                        if(item._id === _id){
                            setArrActive(arrActive.toSpliced(index,1)) 
                        }
                    })
                })
                .catch(e=>console.log(e))
            }}>–û—Ç–º–µ–Ω–∏—Ç—å<Image src={'/components/close.svg'} width={20} height={20} alt="completeReq"/></button>
        </div>

        {partsOption.map((item,index)=>{
            return <div key={index} className="partReq">
                <h3 onClick={()=>router.push(`/warehouse?id=${item._doc._id}`)}>–ó–∞–ø—á–∞—Å—Ç—å {index +1}:</h3>
                <div className="count">
                    <p>{item._doc.name + ' ' + item._doc.manufacturer}</p>
                    <p>–ù—É–∂–Ω–æ: {item.countReq +' '+ item.description}</p>
                    <p>–ò–º–µ–µ—Ç—Å—è: {item._doc.count}</p>
                </div>
            </div>
        })}

        {err.length !== 0?
        <p style={{color:'#FF8181', margin:'0.5em 0 0 0'}}>
            –ù–∞ —Å–∫–ª–∞–¥–µ –Ω–µ –∏–º–µ–µ—Ç—Å—è –∫–æ–ª-–≤–æ –∑–∞–ø—á–∞—Å—Ç–µ–π —Å–æ–≥–ª–∞—Å–Ω–æ –∑–∞—è–≤–∫–µ 
        </p>
        :''}
    </div>
}