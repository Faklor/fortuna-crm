import { useState, useEffect } from 'react'
import '../scss/addReq.scss'
import axios from 'axios'
import { useSession } from 'next-auth/react'
import { useRouter } from 'next/navigation'
import Image from 'next/image'

const URGENCY_TYPES = {
    '–ù–ï –°–†–û–ß–ù–ê–Ø': {
        emoji: 'üü¢',
        color: '#4CAF50'
    },
    '–°–†–ï–î–ù–ï–ô –°–†–û–ß–ù–û–°–¢–ò': {
        emoji: 'üü°',
        color: '#FFA500'
    },
    '–°–†–û–ß–ù–ê–Ø': {
        emoji: 'üî¥',
        color: '#F44336'
    }
};

export default function AddReq({setVisibleAdd, arrActive, objects, parts}){
    const { data: session } = useSession()
    const router = useRouter()

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    const categorizedObjects = objects.reduce((acc, obj) => {
        const category = obj.catagory || '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏';
        if (!acc[category]) {
            acc[category] = [];
        }
        acc[category].push(obj);
        return acc;
    }, {});

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç—ã –≤ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –∏–º–µ–Ω–∏
    Object.keys(categorizedObjects).forEach(category => {
        categorizedObjects[category].sort((a, b) => a.name.localeCompare(b.name));
    });

    // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –æ–±—ä–µ–∫—Ç –∏–∑ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
    const firstCategory = Object.keys(categorizedObjects)[0];
    const firstObject = categorizedObjects[firstCategory][0];

    //default
    const selectedData = {}
    
    const arrUrgency = ['–ù–ï –°–†–û–ß–ù–ê–Ø', '–°–†–ï–î–ù–ï–ô –°–†–û–ß–ù–û–°–¢–ò', '–°–†–û–ß–ù–ê–Ø']
    const des = ['—à—Ç.', '–ª.', '—Å–º.', '–º.']
    let bindingParts = []
    let otherParts = [...parts]
    const defaultDate = new Date().toLocaleDateString()

    function formatDate(inputDate) {
        const parts = inputDate.split('.');
        if (parts.length !== 3) {
          return '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã';
        }
        const day = parts[0];
        const month = parts[1];
        const year = parts[2];
        const formattedDate = `${year}-${month}-${day}`;
        return formattedDate;
    }

    //react
    const [date, setSdate] = useState(formatDate(defaultDate))
    const [urgencySt, setUrgencySt] = useState(arrUrgency[0])
    const [objectSt, setObjectSt] = useState(JSON.stringify(firstObject))
    const [selectDes, setSelectDes] = useState(des[0])
    //react-checked
    const [selectedParts, setSelectedParts] = useState([])
    const [partValues, setPartValues] = useState({})
    const [selectedDes, setSelectedDes] = useState({})
    const [err, setErr] = useState('')

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞
    const [searchBindingParts, setSearchBindingParts] = useState('')
    const [searchOtherParts, setSearchOtherParts] = useState('')

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –æ–±—ä–µ–∫—Ç–æ–≤ –∏ –∏—Ö –∑–∞–ø—á–∞—Å—Ç–µ–π
    const [selectedObjects, setSelectedObjects] = useState([{
        obj: JSON.parse(objectSt),
        selectedParts: [],
        partValues: {},
        selectedDes: {}
    }]);

    // –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
    const addNewObject = () => {
        setSelectedObjects([...selectedObjects, {
            obj: JSON.parse(objectSt),
            selectedParts: [],
            partValues: {},
            selectedDes: {}
        }]);
    };

    // –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞
    const removeObject = (index) => {
        setSelectedObjects(selectedObjects.filter((_, i) => i !== index));
    };

    //logic
    const handleCheckboxChange = (objectIndex, event, partId) => {
        const isChecked = event.target.checked;
        setSelectedObjects(prevObjects => {
            const newObjects = [...prevObjects];
            if (isChecked) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –ª–∏ —É–∂–µ —ç—Ç–∞ –∑–∞–ø—á–∞—Å—Ç—å
                if (!newObjects[objectIndex].selectedParts.includes(partId)) {
                    newObjects[objectIndex].selectedParts = [...newObjects[objectIndex].selectedParts, partId];
                }
            } else {
                newObjects[objectIndex].selectedParts = newObjects[objectIndex].selectedParts.filter(id => id !== partId);
            }
            return newObjects;
        });
    };

    const handleNumberInputChange = (objectIndex, event, partId) => {
        const value = event.target.value;
        setSelectedObjects(prevObjects => {
            const newObjects = [...prevObjects];
            newObjects[objectIndex].partValues = {
                ...newObjects[objectIndex].partValues,
                [partId]: value
            };
            return newObjects;
        });
    };

    const handleSelectChange = (objectIndex, event, partId) => {
        const value = event.target.value;
        setSelectedObjects(prevObjects => {
            const newObjects = [...prevObjects];
            newObjects[objectIndex].selectedDes = {
                ...newObjects[objectIndex].selectedDes,
                [partId]: value
            };
            return newObjects;
        });
    };

    if(parts.length !== 0){
        parts.forEach((part,index)=>{
            JSON.parse(objectSt).bindingParts.forEach(partInObj=>{
                if(partInObj._id === part._id){
                    bindingParts.push(part)
                    
                    otherParts.splice(index, 1)
                }
            })

        })
    }

    // –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–ø—á–∞—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    const filteredBindingParts = [...new Set(bindingParts)].filter(part => 
        part.name.toLowerCase().includes(searchBindingParts.toLowerCase())
    )

    const filteredOtherParts = [...new Set(otherParts)].filter(part => 
        part.name.toLowerCase().includes(searchOtherParts.toLowerCase())
    )

    //functions
    async function createReq(requests, urgencySt, date) {
        return await axios.post('/api/requisition/addActive', {
            requests,
            urgencySt,
            date
        });
    }
    
    async function sendTelegramNotification(reqData, selectedObjects, parts, session) {
        const urgencyTypes = {
            '–ù–ï –°–†–û–ß–ù–ê–Ø': 'üü¢',
            '–°–†–ï–î–ù–ï–ô –°–†–û–ß–ù–û–°–¢–ò': 'üü°',
            '–°–†–û–ß–ù–ê–Ø': 'üî¥'
        };

        const objectsInfo = selectedObjects.map(objData => {
            const partsInfo = objData.selectedParts.map(partId => {
                const part = parts.find(p => p._id === partId);
                return `‚Ä¢ ${objData.partValues[partId]} ${objData.selectedDes[partId]} ${part.name}`;
            }).join('\n');

            return `
üè¢ –û–±—ä–µ–∫—Ç: ${objData.obj.name}
${partsInfo}`;
        }).join('\n\n');

        const message = `
<b>üîî –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞</b>

üìÖ –î–∞—Ç–∞: ${reqData.date}
‚ö° –°—Ä–æ—á–Ω–æ—Å—Ç—å: ${urgencyTypes[reqData.urgencySt]} <code>${reqData.urgencySt}</code>
üë§ –°–æ–∑–¥–∞–ª: ${session.user.name} (${session.user.role})

${objectsInfo}`;

        return await axios.post('/api/telegram/sendNotification', { message, type: 'requests' });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é handleSubmit
    const handleSubmit = async () => {
        try {
            if (!session) {
                setErr('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è');
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∑–∞–ø—á–∞—Å—Ç–µ–π
            if (selectedObjects.some(obj => obj.selectedParts.length === 0)) {
                setErr('–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø—á–∞—Å—Ç–∏ –¥–ª—è –≤—Å–µ—Ö –æ–±—ä–µ–∫—Ç–æ–≤');
                return;
            }

            // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∑–∞–ø—á–∞—Å—Ç–µ–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
            const uniqueRequests = selectedObjects.map(objData => ({
                obj: objData.obj._id,
                parts: Array.from(new Set(objData.selectedParts)).map(partId => ({
                    _id: partId,
                    countReq: parseInt(objData.partValues[partId] || 0),
                    description: objData.selectedDes[partId] || '—à—Ç.'
                }))
            }));

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏
            const res = await createReq(uniqueRequests, urgencySt, date);
            
            // –ï—Å–ª–∏ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            if (res.data) {
                await sendTelegramNotification(
                    { date, urgencySt },
                    selectedObjects,
                    parts,
                    session
                );
                
                // –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
                setVisibleAdd(false);
                
                // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–º–µ—Å—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
                window.location.reload();
            }
        } catch (e) {
            console.error('Error creating requisition:', e);
            setErr(e.response?.data?.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏');
        }
    };

    return  <div className="addReq">
        <div className='message'>
            <div className="header">
                <button className="back-button" onClick={()=>setVisibleAdd(false)}>
                    ‚Üê –ù–∞–∑–∞–¥
                </button>
                <h2>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏</h2>
            </div>

            <div className="objects-container">
                {selectedObjects.map((objData, objectIndex) => (
                    <div key={objectIndex} className="object-section">
                        <div className="object-header">
                            <h3>–û–±—ä–µ–∫—Ç {objectIndex + 1}</h3>
                            {objectIndex > 0 && (
                                <button 
                                    className="remove-object"
                                    onClick={() => removeObject(objectIndex)}
                                >
                                    –£–¥–∞–ª–∏—Ç—å –æ–±—ä–µ–∫—Ç
                                </button>
                            )}
                        </div>
                        
                        <div className="form-section">
                            <div className="form-group">
                                <label>üìÖ –î–∞—Ç–∞ –∑–∞—è–≤–∫–∏</label>
                                <input 
                                    type='date' 
                                    value={date} 
                                    onChange={e=>setSdate(e.target.value)}
                                    className="date-input"
                                />
                            </div>

                            <div className="form-group">
                                <label>‚ö° –°—Ä–æ—á–Ω–æ—Å—Ç—å</label>
                                <select 
                                    onChange={e=>setUrgencySt(e.target.value)}
                                    className="urgency-select"
                                    style={{
                                        backgroundColor: URGENCY_TYPES[urgencySt].color,
                                        color: 'white'
                                    }}
                                >
                                    {arrUrgency.map((urgency, index)=>(
                                        <option 
                                            key={index} 
                                            value={urgency}
                                            style={{
                                                backgroundColor: 'white',
                                                color: URGENCY_TYPES[urgency].color
                                            }}
                                        >
                                            {URGENCY_TYPES[urgency].emoji} {urgency}
                                        </option>
                                    ))}
                                </select>
                            </div>

                            <div className="form-group">
                                <label>üöú –í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç</label>
                                <div className="object-select-container">
                                    <select 
                                        onChange={e => {
                                            setObjectSt(e.target.value);
                                            setSelectedObjects(prevObjects => {
                                                const newObjects = [...prevObjects];
                                                newObjects[objectIndex] = {
                                                    ...newObjects[objectIndex],
                                                    obj: JSON.parse(e.target.value)
                                                };
                                                return newObjects;
                                            });
                                        }}
                                        className="object-select"
                                        value={JSON.stringify(objData.obj)}
                                    >
                                        {Object.entries(categorizedObjects).map(([category, categoryObjects]) => (
                                            <optgroup key={category} label={category}>
                                                {categoryObjects.map((obj, index) => (
                                                    <option 
                                                        key={`${category}-${index}`} 
                                                        value={JSON.stringify(obj)}
                                                    >
                                                        {obj.name}
                                                    </option>
                                                ))}
                                            </optgroup>
                                        ))}
                                    </select>
                                    <button 
                                        className="add-part-button"
                                        onClick={() => router.push('/warehouse/addPart')}
                                        title="–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–ø—á–∞—Å—Ç—å"
                                    >
                                        <Image 
                                            src="/components/add.svg" 
                                            width={24} 
                                            height={24} 
                                            alt="–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø—á–∞—Å—Ç—å" 
                                        />
                                    </button>
                                </div>
                            </div>
                        </div>

                        <div className="parts-section">
                            <div className="parts-group">
                                <div className="parts-header">
                                    <h3>üì¶ –ó–∞–ø—á–∞—Å—Ç–∏, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –∫ –æ–±—ä–µ–∫—Ç—É</h3>
                                    <div className="search-container">
                                        <input 
                                            type="text"
                                            placeholder="üîç –ü–æ–∏—Å–∫ –∑–∞–ø—á–∞—Å—Ç–µ–π..."
                                            value={searchBindingParts}
                                            onChange={(e) => setSearchBindingParts(e.target.value)}
                                            className="search-input"
                                        />
                                        {searchBindingParts && (
                                            <button 
                                                className="clear-search"
                                                onClick={() => setSearchBindingParts('')}
                                            >
                                                ‚úï
                                            </button>
                                        )}
                                    </div>
                                </div>
                                <div className='parts-grid'>
                                    {filteredBindingParts.length > 0 ? (
                                        filteredBindingParts.map((item,index)=>(
                                            <div key={index} className='part-card'>
                                                <div className="part-header">
                                                    <input 
                                                        type='checkbox' 
                                                        value={item._id} 
                                                        onChange={(e) => handleCheckboxChange(objectIndex, e, item._id)}
                                                        checked={objData.selectedParts.includes(item._id)}
                                                        className="part-checkbox"
                                                    />
                                                    <div className="part-info">
                                                        <p className="part-name">{item.name}</p>
                                                        <p className="part-stock">–ù–∞ —Å–∫–ª–∞–¥–µ: {item.count} —à—Ç.</p>
                                                    </div>
                                                </div>
                                                
                                                {objData.selectedParts.includes(item._id) && (
                                                    <div className="part-details">
                                                        <input 
                                                            type="number" 
                                                            placeholder='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'
                                                            value={objData.partValues[item._id] || ''} 
                                                            onChange={(e) => handleNumberInputChange(objectIndex, e, item._id)}
                                                            className="quantity-input"
                                                        />
                                                        <select 
                                                            onChange={(e) => handleSelectChange(objectIndex, e, item._id)} 
                                                            value={objData.selectedDes[item._id] || ''}
                                                            className="unit-select"
                                                        >
                                                            <option value="">–ï–¥. –∏–∑–º.</option>
                                                            {des.map((item, index)=>(
                                                                <option key={index} value={item}>{item}</option>
                                                            ))}
                                                        </select>
                                                    </div>
                                                )}
                                            </div>
                                        ))
                                    ) : (
                                        <div className="no-results">
                                            –ó–∞–ø—á–∞—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
                                        </div>
                                    )}
                                </div>
                            </div>

                            <div className="parts-group">
                                <div className="parts-header">
                                    <h3>üîß –î—Ä—É–≥–∏–µ –∑–∞–ø—á–∞—Å—Ç–∏</h3>
                                    <div className="search-container">
                                        <input 
                                            type="text"
                                            placeholder="üîç –ü–æ–∏—Å–∫ –∑–∞–ø—á–∞—Å—Ç–µ–π..."
                                            value={searchOtherParts}
                                            onChange={(e) => setSearchOtherParts(e.target.value)}
                                            className="search-input"
                                        />
                                        {searchOtherParts && (
                                            <button 
                                                className="clear-search"
                                                onClick={() => setSearchOtherParts('')}
                                            >
                                                ‚úï
                                            </button>
                                        )}
                                    </div>
                                </div>
                                <div className='parts-grid'>
                                    {filteredOtherParts.length > 0 ? (
                                        filteredOtherParts.map((item,index)=>{
                                            return <div key={index} className='part-card'>
                                                <div className="part-header">
                                                    <input 
                                                        type='checkbox' 
                                                        value={item._id} 
                                                        onChange={(e) => handleCheckboxChange(objectIndex, e, item._id)}
                                                        checked={objData.selectedParts.includes(item._id)}
                                                    />
                                                    <div className="part-info">
                                                        <p className="part-name">{item.name}</p>
                                                        <p className="part-stock">–ù–∞ —Å–∫–ª–∞–¥–µ: {item.count} —à—Ç.</p>
                                                    </div>
                                                </div>
                                                {objData.selectedParts.includes(item._id) && <div className="part-details">
                                                    <input 
                                                        type="number" 
                                                        placeholder='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'
                                                        value={objData.partValues[item._id] || ''} 
                                                        onChange={(e) => handleNumberInputChange(objectIndex, e, item._id)}
                                                    />
                                                    <select 
                                                        onChange={(e) => handleSelectChange(objectIndex, e, item._id)}
                                                        value={objData.selectedDes[item._id] || ''}
                                                    >
                                                        <option value="">–ï–¥. –∏–∑–º.</option>
                                                        {des.map((item, index)=>{
                                                            return <option key={index} value={item}>{item}</option>
                                                        })}
                                                    </select>
                                                </div>}
                                            </div>
                                        })
                                    ) : (
                                        <div className="no-results">
                                            –ó–∞–ø—á–∞—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
                                        </div>
                                    )}
                                </div>
                            </div>
                        </div>
                    </div>
                ))}

                <button 
                    className="add-object-button"
                    onClick={addNewObject}
                >
                    + –î–æ–±–∞–≤–∏—Ç—å –æ–±—ä–µ–∫—Ç
                </button>
            </div>

            {err && <div className="error-message">{err}</div>}

            <button 
                className="submit-button"
                onClick={handleSubmit}
            >
                ‚úÖ –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É
            </button>
        </div>
    </div>
}