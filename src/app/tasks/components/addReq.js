import { useState, useEffect } from 'react'
import '../scss/addReq.scss'
import axios from 'axios'

const URGENCY_TYPES = {
    '–ù–ï –°–†–û–ß–ù–ê–Ø': {
        emoji: 'üü¢',
        color: '#4CAF50'
    },
    '–°–†–ï–î–ù–ï–ô –°–†–û–ß–ù–û–°–¢–ò': {
        emoji: 'üü°',
        color: '#FFA500'
    },
    '–°–†–û–ß–ù–ê–Ø': {
        emoji: 'üî¥',
        color: '#F44336'
    }
};

export default function AddReq({setVisibleAdd, arrActive, objects, parts}){

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    const categorizedObjects = objects.reduce((acc, obj) => {
        const category = obj.catagory || '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏';
        if (!acc[category]) {
            acc[category] = [];
        }
        acc[category].push(obj);
        return acc;
    }, {});

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç—ã –≤ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –∏–º–µ–Ω–∏
    Object.keys(categorizedObjects).forEach(category => {
        categorizedObjects[category].sort((a, b) => a.name.localeCompare(b.name));
    });

    // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –æ–±—ä–µ–∫—Ç –∏–∑ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
    const firstCategory = Object.keys(categorizedObjects)[0];
    const firstObject = categorizedObjects[firstCategory][0];

    //default
    const selectedData = {}
    
    const arrUrgency = ['–ù–ï –°–†–û–ß–ù–ê–Ø', '–°–†–ï–î–ù–ï–ô –°–†–û–ß–ù–û–°–¢–ò', '–°–†–û–ß–ù–ê–Ø']
    const des = ['—à—Ç.', '–ª.', '—Å–º.', '–º.']
    let bindingParts = []
    let otherParts = [...parts]
    const defaultDate = new Date().toLocaleDateString()

    function formatDate(inputDate) {
        const parts = inputDate.split('.');
        if (parts.length !== 3) {
          return '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã';
        }
        const day = parts[0];
        const month = parts[1];
        const year = parts[2];
        const formattedDate = `${year}-${month}-${day}`;
        return formattedDate;
    }

    //react
    const [date, setSdate] = useState(formatDate(defaultDate))
    const [urgencySt, setUrgencySt] = useState(arrUrgency[0])
    const [objectSt, setObjectSt] = useState(JSON.stringify(firstObject))
    const [selectDes, setSelectDes] = useState(des[0])
    //react-checked
    const [selectedParts, setSelectedParts] = useState([])
    const [partValues, setPartValues] = useState({})
    const [selectedDes, setSelectedDes] = useState({})
    const [err, setErr] = useState('')

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞
    const [searchBindingParts, setSearchBindingParts] = useState('')
    const [searchOtherParts, setSearchOtherParts] = useState('')

    //logic
    const handleCheckboxChange = (event, partId) => {
        const isChecked = event.target.checked;
        if (isChecked) {
          // –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —á–∞—Å—Ç—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
          setSelectedParts((prevSelected) => [...prevSelected, partId]);
        } 
        else {
          // –£–¥–∞–ª—è–µ–º —á–∞—Å—Ç—å –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
          setSelectedParts((prevSelected) =>
            prevSelected.filter((id) => id !== partId)
          )
        }
    }
    const handleNumberInputChange = (event, partId) => {
        const value = event.target.value;
        setPartValues((prevValues) => ({ ...prevValues, [partId]: value }));
    }
    const handleSelectChange = (e, partId) => {
        const value = e.target.value;
        setSelectedDes((prevSelectedDes) => ({ ...prevSelectedDes, [partId]: value }));
    }

    if(parts.length !== 0){
        parts.forEach((part,index)=>{
            JSON.parse(objectSt).bindingParts.forEach(partInObj=>{
                if(partInObj._id === part._id){
                    bindingParts.push(part)
                    
                    otherParts.splice(index, 1)
                }
            })

        })
    }

    // –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–ø—á–∞—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    const filteredBindingParts = [...new Set(bindingParts)].filter(part => 
        part.name.toLowerCase().includes(searchBindingParts.toLowerCase())
    )

    const filteredOtherParts = [...new Set(otherParts)].filter(part => 
        part.name.toLowerCase().includes(searchOtherParts.toLowerCase())
    )

    //functions
    async function createReq(selectedArr,urgencySt,date,objectID){
        return await axios.post('/api/requisition/addActive',{selectedArr:selectedArr,urgencySt:urgencySt,date:date,objectID:objectID})
    }
    
    async function sendTelegramNotification(reqData, object, selectedParts) {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∏ —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ä–æ—á–Ω–æ—Å—Ç–∏
        let urgencyEmoji, urgencyColor;
        switch(reqData.urgencySt) {
            case '–°–†–û–ß–ù–ê–Ø':
                urgencyEmoji = 'üî¥';
                urgencyColor = '#FF0000';
                break;
            case '–°–†–ï–î–ù–ï–ô –°–†–û–ß–ù–û–°–¢–ò':
                urgencyEmoji = 'üü°';
                urgencyColor = '#FFA500';
                break;
            case '–ù–ï –°–†–û–ß–ù–ê–Ø':
                urgencyEmoji = 'üü¢';
                urgencyColor = '#008000';
                break;
            default:
                urgencyEmoji = '‚ö™';
                urgencyColor = '#000000';
        }

        const partsWithNames = selectedParts.map(selectedPart => {
            const partInfo = parts.find(p => p._id === selectedPart._id);
            return {
                ...selectedPart,
                name: partInfo ? partInfo.name : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∑–∞–ø—á–∞—Å—Ç—å'
            };
        });

        const message = `
        <b>üîî –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞</b>

üìÖ –î–∞—Ç–∞: ${reqData.date}
üè¢ –û–±—ä–µ–∫—Ç: ${object.name}
‚ö° –°—Ä–æ—á–Ω–æ—Å—Ç—å: ${urgencyEmoji} <code>${reqData.urgencySt}</code>

<b>–ó–∞–ø—á–∞—Å—Ç–∏:</b>
${partsWithNames.map(part => `‚Ä¢ ${part.countReq} ${part.description} ${part.name}`).join('\n')}
        `;

        return await axios.post('/api/telegram/sendNotification', { message, type: 'requests' });
    }

    
    return  <div className="addReq">
        <div className='message'>
            <div className="header">
                <button className="back-button" onClick={()=>setVisibleAdd(false)}>
                    ‚Üê –ù–∞–∑–∞–¥
                </button>
                <h2>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏</h2>
            </div>

            <div className="form-section">
                <div className="form-group">
                    <label>üìÖ –î–∞—Ç–∞ –∑–∞—è–≤–∫–∏</label>
                    <input 
                        type='date' 
                        value={date} 
                        onChange={e=>setSdate(e.target.value)}
                        className="date-input"
                    />
                </div>

                <div className="form-group">
                    <label>‚ö° –°—Ä–æ—á–Ω–æ—Å—Ç—å</label>
                    <select 
                        onChange={e=>setUrgencySt(e.target.value)}
                        className="urgency-select"
                        style={{
                            backgroundColor: URGENCY_TYPES[urgencySt].color,
                            color: 'white'
                        }}
                    >
                        {arrUrgency.map((urgency, index)=>(
                            <option 
                                key={index} 
                                value={urgency}
                                style={{
                                    backgroundColor: 'white',
                                    color: URGENCY_TYPES[urgency].color
                                }}
                            >
                                {URGENCY_TYPES[urgency].emoji} {urgency}
                            </option>
                        ))}
                    </select>
                </div>

                <div className="form-group">
                    <label>üöú –í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç</label>
                    <select 
                        onChange={e=>setObjectSt(e.target.value)}
                        className="object-select"
                    >
                        {Object.entries(categorizedObjects).map(([category, categoryObjects]) => (
                            <optgroup key={category} label={category}>
                                {categoryObjects.map((obj, index) => (
                                    <option 
                                        key={`${category}-${index}`} 
                                        value={JSON.stringify(obj)}
                                    >
                                        {obj.name}
                                    </option>
                                ))}
                            </optgroup>
                        ))}
                    </select>
                </div>
            </div>

            <div className="parts-section">
                <div className="parts-group">
                    <div className="parts-header">
                        <h3>üì¶ –ó–∞–ø—á–∞—Å—Ç–∏, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –∫ –æ–±—ä–µ–∫—Ç—É</h3>
                        <div className="search-container">
                            <input 
                                type="text"
                                placeholder="üîç –ü–æ–∏—Å–∫ –∑–∞–ø—á–∞—Å—Ç–µ–π..."
                                value={searchBindingParts}
                                onChange={(e) => setSearchBindingParts(e.target.value)}
                                className="search-input"
                            />
                            {searchBindingParts && (
                                <button 
                                    className="clear-search"
                                    onClick={() => setSearchBindingParts('')}
                                >
                                    ‚úï
                                </button>
                            )}
                        </div>
                    </div>
                    <div className='parts-grid'>
                        {filteredBindingParts.length > 0 ? (
                            filteredBindingParts.map((item,index)=>(
                                <div key={index} className='part-card'>
                                    <div className="part-header">
                                        <input 
                                            type='checkbox' 
                                            value={item._id} 
                                            onChange={(e) => handleCheckboxChange(e, item._id)}
                                            className="part-checkbox"
                                        />
                                        <div className="part-info">
                                            <p className="part-name">{item.name}</p>
                                            <p className="part-stock">–ù–∞ —Å–∫–ª–∞–¥–µ: {item.count} —à—Ç.</p>
                                        </div>
                                    </div>
                                    
                                    {selectedParts.includes(item._id) && (
                                        <div className="part-details">
                                            <input 
                                                type="number" 
                                                placeholder='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'
                                                value={partValues[item._id] || ''} 
                                                onChange={(e) => handleNumberInputChange(e, item._id)}
                                                className="quantity-input"
                                            />
                                            <select 
                                                onChange={e=>handleSelectChange(e, item._id)} 
                                                value={selectedDes[item._id] || ''}
                                                className="unit-select"
                                            >
                                                <option value="">–ï–¥. –∏–∑–º.</option>
                                                {des.map((item, index)=>(
                                                    <option key={index} value={item}>{item}</option>
                                                ))}
                                            </select>
                                        </div>
                                    )}
                                </div>
                            ))
                        ) : (
                            <div className="no-results">
                                –ó–∞–ø—á–∞—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
                            </div>
                        )}
                    </div>
                </div>

                <div className="parts-group">
                    <div className="parts-header">
                        <h3>üîß –î—Ä—É–≥–∏–µ –∑–∞–ø—á–∞—Å—Ç–∏</h3>
                        <div className="search-container">
                            <input 
                                type="text"
                                placeholder="üîç –ü–æ–∏—Å–∫ –∑–∞–ø—á–∞—Å—Ç–µ–π..."
                                value={searchOtherParts}
                                onChange={(e) => setSearchOtherParts(e.target.value)}
                                className="search-input"
                            />
                            {searchOtherParts && (
                                <button 
                                    className="clear-search"
                                    onClick={() => setSearchOtherParts('')}
                                >
                                    ‚úï
                                </button>
                            )}
                        </div>
                    </div>
                    <div className='parts-grid'>
                        {filteredOtherParts.length > 0 ? (
                            filteredOtherParts.map((item,index)=>{
                                return <div key={index} className='part-card'>
                                    <div className="part-header">
                                        <input type='checkbox' value={item._id} onChange={(e) => handleCheckboxChange(e, item._id)}/>
                                        <div className="part-info">
                                            <p className="part-name">{item.name}</p>
                                            <p className="part-stock">–ù–∞ —Å–∫–ª–∞–¥–µ: {item.count} —à—Ç.</p>
                                        </div>
                                    </div>
                                    {selectedParts.includes(item._id) && <div className="part-details">
                                        <input type="number" placeholder='–í–≤–µ–¥–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –∫–æ–ª-–≤–æ' 
                                        value={partValues[item._id] || ''} onChange={(e) => handleNumberInputChange(e, item._id)}/>
                                        <select onChange={e=>handleSelectChange(e, item._id)} value={selectedDes[item._id] || ''}>
                                            <option></option>
                                            {des.map((item, index)=>{
                                                return <option key={index} value={item}>{item}</option>
                                            })}
                                        </select>
                                    </div>}
                                </div>
                            })
                        ) : (
                            <div className="no-results">
                                –ó–∞–ø—á–∞—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
                            </div>
                        )}
                    </div>
                </div>
            </div>

            {err && <div className="error-message">‚ö†Ô∏è {err}</div>}

            <button 
                className="submit-button"
                onClick={()=>{
                    let selectedArr = []
                    selectedParts.forEach((partId) => {
                        selectedArr.push({
                            _id:partId, 
                            countReq:Number(partValues[partId] !== undefined?partValues[partId]:''), 
                            description:selectedDes[partId] !== undefined?selectedDes[partId]:''
                        })
                    })

                    if(selectedArr.length === 0){
                        setErr('–ù–µ –≤—ã–±—Ä–∞–Ω—ã –∑–∞–ø—á–∞—Å—Ç–∏')
                    }
                    else{
                        selectedArr.forEach((item)=>{
                            if(item.count <= 0){
                                setErr('–ù–µ –≤–µ–∑–¥–µ —É–∫–∞–∑–∞–Ω–æ –∫–æ–ª-–≤–æ')        
                            }
                        })

                        setErr('')
                        createReq(selectedArr,urgencySt,date,JSON.parse(objectSt)._id)
                        .then(res=>{
                            arrActive.push(res.data)
                            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
                            sendTelegramNotification(
                                { date, urgencySt, objectSt }, 
                                JSON.parse(objectSt), 
                                selectedArr
                            ).catch(e => console.log('Failed to send notification:', e))
                            
                            setVisibleAdd(false)
                            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                            window.location.reload()
                        })
                        .catch(e=>console.log(e))
                    }                
                }}
            >
                ‚úÖ –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É
            </button>
        </div>
    </div>
}