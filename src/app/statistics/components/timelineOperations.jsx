'use client'
import { useState, useEffect } from 'react'
import anime from 'animejs'
import axios from 'axios'
import '../scss/timelineOperations.scss'

const TimelineOperations = ({ visibleObjects }) => {
    const [selectedObject, setSelectedObject] = useState('')
    const [operations, setOperations] = useState([])
    const [orders, setOrders] = useState([])
    const [requests, setRequests] = useState([])
    const [loading, setLoading] = useState(false)

    const getUnit = (category) => {
        return category === 'üîÜ –ö–æ–º–±–∞–π–Ω—ã' || 
               category === 'üíß –û–ø—Ä—ã—Å–∫–∏–≤–∞—Ç–µ–ª–∏' || 
               category === 'üöú –¢—Ä–∞–∫—Ç–æ—Ä–∞' || 
               category === 'üì¶ –ü–æ–≥—Ä—É—â–∏–∫–∏' ? '–º.—á.' : '–∫–º.'
    }

    const fetchData = async (objectId) => {
        try {
            setLoading(true)
            
            // –ó–∞–ø—Ä–æ—Å –æ–ø–µ—Ä–∞—Ü–∏–π
            const operationsResponse = await axios.post('/api/operations', { _id: objectId })
            const sortedOperations = operationsResponse.data.sort((a, b) => 
                new Date(b.date) - new Date(a.date)
            )
            console.log('–û–ø–µ—Ä–∞—Ü–∏–∏:', sortedOperations)
            setOperations(sortedOperations)

            // –ó–∞–ø—Ä–æ—Å –≤—ã–¥–∞—á–∏ –∑–∞–ø—á–∞—Å—Ç–µ–π
            const ordersResponse = await axios.post('/api/orders', { _id: objectId })
            const sortedOrders = ordersResponse.data.sort((a, b) => 
                new Date(b.date) - new Date(a.date)
            )
            console.log('–í—ã–¥–∞—á–∞ –∑–∞–ø—á–∞—Å—Ç–µ–π:', sortedOrders)
            setOrders(sortedOrders)

            // –ó–∞–ø—Ä–æ—Å –∑–∞—è–≤–æ–∫
            const requestsResponse = await axios.post('/api/historyReqs/findObj', { _id: objectId })
            const sortedRequests = requestsResponse.data.sort((a, b) => 
                new Date(b.dateEnd) - new Date(a.dateEnd)
            )
            console.log('–ó–∞—è–≤–∫–∏:', sortedRequests)
            setRequests(sortedRequests)

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error)
        } finally {
            setLoading(false)
        }
    }

    useEffect(() => {
        if (selectedObject) {
            fetchData(selectedObject)
        }
    }, [selectedObject])

    const renderUsedParts = (parts) => {
        if (!parts || parts.length === 0) return null;
        
        return (
            <div className="used-parts">
                <p>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø—á–∞—Å—Ç–∏:</p>
                <ul>
                    {parts.map((part, index) => (
                        <li key={part._id || index}>
                            {part.name} - {part.count} —à—Ç.
                            {part.sum > 0 && ` (${part.sum} —Ä—É–±.)`}
                        </li>
                    ))}
                </ul>
            </div>
        );
    };

    const selectedObjectData = visibleObjects.find(obj => obj._id === selectedObject);

    const getOperationTypeClass = (type) => {
        switch (type) {
            case '–†–µ–º–æ–Ω—Ç':
                return 'operation-repair';
            case '–ù–∞–≤–∏–≥–∞—Ü–∏—è':
                return 'operation-navigation';
            case '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –û—Å–º–æ—Ç—Ä':
                return 'operation-inspection';
            case '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ':
                return 'operation-maintenance';
            default:
                return '';
        }
    };

    const getOrderTypeClass = (type) => {
        switch (type) {
            case 'operation':
                return 'order-operation';
            case 'manual':
                return 'order-manual';
            case 'request':
                return 'order-request';
            default:
                return 'order-default';
        }
    };

    const getOrderTypeText = (type) => {
        switch (type) {
            case 'operation':
                return '–ü–æ –æ–ø–µ—Ä–∞—Ü–∏–∏';
            case 'manual':
                return '–†—É—á–Ω–∞—è –≤—ã–¥–∞—á–∞';
            case 'request':
                return '–ü–æ –∑–∞—è–≤–∫–µ';
            default:
                return '–í—ã–¥–∞—á–∞ –∑–∞–ø—á–∞—Å—Ç–µ–π';
        }
    };

    const getUrgencyClass = (urgency) => {
        switch (urgency) {
            case '–°—Ä–æ—á–Ω–æ':
                return 'request-urgent';
            case '–ù–µ —Å—Ä–æ—á–Ω–æ':
                return 'request-normal';
            case '–ó–∞–∫—Ä—ã—Ç–∞':
                return 'request-closed';
            default:
                return 'request-default';
        }
    };

    useEffect(() => {
        if (operations.length > 0) {
            // –ê–Ω–∏–º–∞—Ü–∏—è —Ç–æ—á–µ–∫ –Ω–∞ —Ç–∞–π–º–ª–∞–π–Ω–µ
            anime({
                targets: '.timeline-point',
                opacity: [0, 1],
                translateY: [20, 0],
                delay: anime.stagger(100), // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∞–Ω–∏–º–∞—Ü–∏—è–º–∏ –∫–∞–∂–¥–æ–π —Ç–æ—á–∫–∏
                duration: 800,
                easing: 'easeOutElastic(1, .5)'
            });

            // –ê–Ω–∏–º–∞—Ü–∏—è –ª–∏–Ω–∏–∏
            anime({
                targets: '.timeline::after',
                scaleX: [0, 1],
                duration: 1000,
                easing: 'easeOutExpo'
            });

            // –ê–Ω–∏–º–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            anime({
                targets: '.timeline-content',
                scale: [0.8, 1],
                opacity: [0, 1],
                delay: anime.stagger(150),
                duration: 800,
                easing: 'easeOutElastic(1, .5)'
            });
        }
    }, [operations]);

    useEffect(() => {
        if (orders.length > 0) {
            // –ê–Ω–∏–º–∞—Ü–∏—è —Ç–æ—á–µ–∫ –Ω–∞ —Ç–∞–π–º–ª–∞–π–Ω–µ –∑–∞–∫–∞–∑–æ–≤
            anime({
                targets: '.orders-timeline-point',
                opacity: [0, 1],
                translateY: [20, 0],
                delay: anime.stagger(100),
                duration: 800,
                easing: 'easeOutElastic(1, .5)'
            });

            // –ê–Ω–∏–º–∞—Ü–∏—è –ª–∏–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤
            anime({
                targets: '.orders-timeline::after',
                scaleX: [0, 1],
                duration: 1000,
                easing: 'easeOutExpo'
            });

            // –ê–Ω–∏–º–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∑–∞–∫–∞–∑–æ–≤
            anime({
                targets: '.orders-timeline-content',
                scale: [0.8, 1],
                opacity: [0, 1],
                delay: anime.stagger(150),
                duration: 800,
                easing: 'easeOutElastic(1, .5)'
            });
        }
    }, [orders]);

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    const groupedObjects = visibleObjects?.reduce((acc, obj) => {
        const category = obj.catagory || 'üì¶ –î—Ä—É–≥–æ–µ';
        if (!acc[category]) {
            acc[category] = [];
        }
        acc[category].push(obj);
        return acc;
    }, {});

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const sortedCategories = Object.keys(groupedObjects || {}).sort((a, b) => {
        const order = {
            'üöú': 1,  // –¢—Ä–∞–∫—Ç–æ—Ä–∞
            'üîÜ': 2,  // –ö–æ–º–±–∞–π–Ω—ã
            'üíß': 3,  // –û–ø—Ä—ã—Å–∫–∏–≤–∞—Ç–µ–ª–∏
            'üì¶': 4,  // –ü–æ–≥—Ä—É–∑—á–∏–∫–∏
            'üè†': 5,  // –ó–¥–∞–Ω–∏—è
            'üöó': 6   // –ê–≤—Ç–æ–º–æ–±–∏–ª–∏
        };
        return (order[a.charAt(0)] || 99) - (order[b.charAt(0)] || 99);
    });

    return (
        <div className="timeline-operations">
            <div className="object-selector">
                <select 
                    value={selectedObject} 
                    onChange={(e) => setSelectedObject(e.target.value)}
                    className="styled-select"
                >
                    <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç</option>
                    {sortedCategories.map(category => (
                        <optgroup key={category} label={category}>
                            {groupedObjects[category]
                                .sort((a, b) => a.name.localeCompare(b.name))
                                .map(obj => (
                                    <option key={obj._id} value={obj._id}>
                                        {obj.name}
                                    </option>
                                ))
                            }
                        </optgroup>
                    ))}
                </select>
            </div>

            {loading && <div className="loading">–ó–∞–≥—Ä—É–∑–∫–∞...</div>}

            {/* –û–ø–µ—Ä–∞—Ü–∏–∏ */}
            {operations.length > 0 && (
                <>
                <h2 className="timeline-title">–ò—Å—Ç–æ—Ä–∏—è –æ–ø—Ä–µ–∞—Ü–∏–π</h2>
                <div className="timeline operations-timeline">
                    {operations.map((operation) => (
                        <div key={operation._id} className="timeline-point">
                            <div className={`timeline-content ${getOperationTypeClass(operation.type)}`}>
                                <h3>{operation.type}</h3>
                                <p>–î–∞—Ç–∞: {new Date(operation.date).toLocaleDateString()}</p>
                                {operation.executors && (
                                    <p>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏: {operation.executors.join(', ')}</p>
                                )}
                                {operation.description && (
                                    <p>–û–ø–∏—Å–∞–Ω–∏–µ: {operation.description}</p>
                                )}
                                {operation.periodMotor && (
                                    <p>–ù–∞—Ä–∞–±–æ—Ç–∫–∞: {operation.periodMotor} {selectedObjectData && getUnit(selectedObjectData.category)}</p>
                                )}
                                {renderUsedParts(operation.usedParts)}
                            </div>
                        </div>
                    ))}
                </div>
                </>
            )}

            {/* –í—ã–¥–∞—á–∞ –∑–∞–ø—á–∞—Å—Ç–µ–π */}
            {orders.length > 0 && (
                <>
                    <h2 className="timeline-title">–ò—Å—Ç–æ—Ä–∏—è –≤—ã–¥–∞—á–∏ –∑–∞–ø—á–∞—Å—Ç–µ–π</h2>
                    <div className="timeline orders-timeline">
                        {orders.map((order) => (
                            <div key={order._id} className="timeline-point">
                                <div className={`timeline-content orders-content ${getOrderTypeClass(order.operationType)}`}>
                                    <h3>{getOrderTypeText(order.operationType)}</h3>
                                    <p>–î–∞—Ç–∞: {new Date(order.date).toLocaleDateString()}</p>
                                    <p>–ü–æ–ª—É—á–∞—Ç–µ–ª—å: {order.workerName}</p>
                                    <div className="part-details">
                                        <h4>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø—á–∞—Å—Ç–∏:</h4>
                                        <p>–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {order.part.name}</p>
                                        <p>–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {order.part.catagory}</p>
                                        <p>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {order.countPart} {order.description}</p>
                                        {order.part.manufacturer && (
                                            <p>–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å: {order.part.manufacturer}</p>
                                        )}
                                        {order.part.serialNumber && (
                                            <p>–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä: {order.part.serialNumber}</p>
                                        )}
                                        {order.part.sellNumber && (
                                            <p>–ù–æ–º–µ—Ä –ø—Ä–æ–¥–∞–∂–∏: {order.part.sellNumber}</p>
                                        )}
                                        {order.part.sum > 0 && (
                                            <p style={{color: '#FA5C62'}}>–°—Ç–æ–∏–º–æ—Å—Ç—å: {order.part.sum} –±.—Ä.</p>
                                        )}
                                    </div>
                                </div>
                            </div>
                        ))}
                    </div>
                </>
            )}

            {/* –ó–∞—è–≤–∫–∏ */}
            {requests.length > 0 && (
                <>
                    <h2 className="timeline-title">–ò—Å—Ç–æ—Ä–∏—è –∑–∞—è–≤–æ–∫</h2>
                    <div className="timeline requests-timeline">
                        {requests.map((request) => (
                            <div key={request._id} className="timeline-point">
                                <div className={`timeline-content requests-content ${getUrgencyClass(request.urgency)}`}>
                                    <h3>–ó–∞—è–≤–∫–∞ {request.urgency}</h3>
                                    <p>–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {new Date(request.dateBegin).toLocaleDateString()}</p>
                                    <p>–î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {new Date(request.dateEnd).toLocaleDateString()}</p>
                                    <div className="request-parts">
                                        <h4>–ó–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–µ –∑–∞–ø—á–∞—Å—Ç–∏:</h4>
                                        <ul>
                                            {request.parts.map((part, index) => (
                                                <li key={part._id || index}>
                                                    <p>–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {part.name}</p>
                                                    <p>–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {part.catagory}</p>
                                                    <p>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {part.count} —à—Ç.</p>
                                                    {part.manufacturer && (
                                                        <p>–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å: {part.manufacturer}</p>
                                                    )}
                                                    {part.contact?.name && (
                                                        <p>–ö–æ–Ω—Ç–∞–∫—Ç: {part.contact.name}</p>
                                                    )}
                                                </li>
                                            ))}
                                        </ul>
                                    </div>
                                </div>
                            </div>
                        ))}
                    </div>
                </>
            )}
        </div>
    )
}

export default TimelineOperations 