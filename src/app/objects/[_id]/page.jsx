import axios from "axios";
import dbConnect from "@/lib/db";
import Tech from "@/models/tech";
import Operations from "@/models/operations";
import Orders from "@/models/orders";
import Link from "next/link";
import Image from "next/image";
import './scss/objInfo.scss'
//----------components-------------
import ControllersObj from "./components/controllertsObj";
import Inspection from "./components/inspection";
import HistoryParts from "./components/historyParts";
import HistoryOperation from "./components/historyOperations";
import BindingParts from "./components/BindingParts";
import EditObject from './components/editObject'
import ImageWithFallback from "./components/ImageWithFallback"
import Workers from "@/models/workers";
import Parts from "@/models/parts";

export const revalidate = 1
export const dynamicParams = true

export async function generateStaticParams() {
    await dbConnect()

    try{
        const objects = await Tech.find({})
    
        return objects.map((obj)=>({
            _id:String(obj._id)
        }))
    }
    catch(e){
    
    }
}

export default async function Page({params, searchParams}){
    await dbConnect()
    //other
    const {_id} = await params
    //db
    
    const object = await Tech.findOne({_id})
    const orders  = await Orders.find({objectID:_id}) 
    const operations  = await Operations.find({objectID:_id})  
    const workers = await Workers.find({}) 
    const parts = await Parts.find({})     
    // –ï—Å–ª–∏ –æ–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –º–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    if (!object) {
        return (
            <div className="error-container">
                <h1>–û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω</h1>
                <Link href="/objects" className="back-button">
                    <Image src="/components/back.svg" width={24} height={24} alt="–ù–∞–∑–∞–¥"/>
                    <span>–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –æ–±—ä–µ–∫—Ç–æ–≤</span>
                </Link>
            </div>
        )
    }

    const visibleObject = JSON.stringify(object)
    const visibleOrders = JSON.stringify(orders)
    const visibleOperation = JSON.stringify(operations)
    const visibleWorkers = JSON.stringify(workers)
    const visibleParts = JSON.stringify(parts)

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º icon –≤ –ø—Ä–æ—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–±—ä–µ–∫—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const iconData = object?.icon ? {
        fileName: object.icon.fileName,
        contentType: object.icon.contentType
    } : null

    return (await searchParams).name !== 'editObj' ? (
        <div className="objInfo">
            <div className="objInfo-container">
                {/* –õ–µ–≤–∞—è —á–∞—Å—Ç—å (–æ—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è) */}
                <div className="column main-info">
                    <Link href="/objects" className="back-button">
                        <Image src="/components/back.svg" width={24} height={24} alt="–ù–∞–∑–∞–¥"/>
                        <span>–ù–∞–∑–∞–¥</span>
                    </Link>
                    
                    <div className="object-image-wrapper">
                        <ImageWithFallback 
                            icon={iconData}
                            width={400} 
                            height={360} 
                            alt={object.name || 'Object image'}
                            style={{ objectFit: 'contain' }}
                        />
                    </div>
                    
                    <h2>{object.catagory.split(' ')[0] +' '+ object.name}</h2>
                    <h3>{object.organization}</h3>
                    <h4>{object.description}</h4>

                    {object.catagory === 'üöÉ –ü—Ä–∏—Ü–µ–ø—ã' && 
                     object.captureWidth !== null && 
                     object.captureWidth !== undefined && 
                     object.captureWidth !== 0 && (
                        <div className="capture-width-info">
                            <span className="capture-width-label">–®–∏—Ä–∏–Ω–∞ –∑–∞—Ö–≤–∞—Ç–∞:</span>
                            <span className="capture-width-value">{object.captureWidth.toFixed(1)} –º</span>
                        </div>
                    )}

                    <ControllersObj _id={_id}/>

                    {/* –ò–Ω—Å–ø–µ–∫—Ü–∏–∏ –∏ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø—á–∞—Å—Ç–∏ */}
                    {object.catagory !== 'üè¢ –ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è' && object.inspection && (
                        <Inspection date={object.inspection.dateBegin} period={object.inspection.period}/>
                    )}
                    
                    {object.bindingParts.length !== 0 && (
                        <>
                            <div className='title orderTtile'>
                                <h2>–°–ø–∏—Å–æ–∫ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∑–∞–ø—á–∞—Å—Ç–µ–π</h2>
                            </div>
                            <BindingParts bindingParts={object.bindingParts}/>
                        </>
                    )}
                </div>

                {/* –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å (–∏—Å—Ç–æ—Ä–∏—è) */}
                <div className="column history">
                    <div className='title'>    
                        <h2>–ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π</h2>
                        <Link className="addOperation" href={{pathname:`/objects/${_id}`,query: { name: 'addOperation' }}}>
                            <Image src={'/components/add.svg'} width={5} height={5} alt='add_Operation'/>
                        </Link>
                    </div>
                    <HistoryOperation 
                        visibleOperation={visibleOperation} 
                        category={object.catagory} 
                        objectID={_id}
                        visibleWorkers={visibleWorkers}
                        visibleParts={visibleParts}
                    />
                    
                    <div className='title orderTtile'>
                        <h2>–ò—Å—Ç–æ—Ä–∏—è –≤—ã–¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—á–∞—Å—Ç–µ–π</h2>
                    </div>
                    <HistoryParts visibleOrders={visibleOrders}/>    
                </div>
            </div>
        </div>
    ) : (
        <EditObject visibleObject={visibleObject}/>
    )
}
