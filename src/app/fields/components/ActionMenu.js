'use client'
import { useState, useRef, useEffect } from 'react';
import shp from 'shpjs';
import axios from 'axios';
import '../scss/actionMenu.scss';

export default function ActionMenu({ 
    onCreateField, 
    isCreatingField, 
    onCancelField,
    onAddNote,
    isCreatingNote,
    onCancelNote,
    season,
    dialog,
    setDialog
}) {
    const [isOpen, setIsOpen] = useState(false);
    const menuRef = useRef(null);
    const fileInputRef = useRef(null);

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
    useEffect(() => {
        const handleClickOutside = (event) => {
            if (menuRef.current && !menuRef.current.contains(event.target)) {
                setIsOpen(false);
            }
        };

        document.addEventListener('mousedown', handleClickOutside);
        return () => document.removeEventListener('mousedown', handleClickOutside);
    }, []);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ Shapefile
    const handleFileUpload = async (event) => {
        if (!event.target.files?.[0]) return;
        
        try {
            const file = event.target.files[0];
            const buffer = await file.arrayBuffer();
            
            // –ü–∞—Ä—Å–∏–º SHP —Ñ–∞–π–ª
            const geojson = await shp(buffer);
            const validFeatures = geojson.features.filter(feature => 
                feature?.geometry && feature.geometry.coordinates && feature.geometry.coordinates.length > 0
            );
            
            if (validFeatures.length === 0) {
                setDialog({
                    isOpen: true,
                    type: 'alert',
                    title: '–û—à–∏–±–∫–∞',
                    message: 'Shapefile –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö',
                    onConfirm: () => setDialog(prev => ({ ...prev, isOpen: false }))
                });
                return;
            }
            
            await axios.post('/api/fields/upload-shapefile', { 
                season: season, 
                features: validFeatures 
            });
            
            setDialog({
                isOpen: true,
                type: 'alert',
                title: '–£—Å–ø–µ—à–Ω–æ',
                message: `–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${validFeatures.length} –æ–±—ä–µ–∫—Ç–æ–≤`,
                onConfirm: () => {
                    setDialog(prev => ({ ...prev, isOpen: false }));
                    window.location.reload(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π
                }
            });
        } catch (error) {
            console.error('Error:', error);
            setDialog({
                isOpen: true,
                type: 'alert',
                title: '–û—à–∏–±–∫–∞',
                message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞',
                onConfirm: () => setDialog(prev => ({ ...prev, isOpen: false }))
            });
        }
        setIsOpen(false); 
    };

    return (
        <div className="action-menu" ref={menuRef}>
            <button 
                className={`action-menu__toggle ${isOpen ? 'active' : ''}`}
                onClick={() => setIsOpen(!isOpen)}
            >
                <span className="action-menu__toggle-icon">+</span>
                <span className="action-menu__toggle-text">–î–µ–π—Å—Ç–≤–∏—è</span>
            </button>

            {isOpen && (
                <div className="action-menu__dropdown">
                    {!isCreatingField && !isCreatingNote && (
                        <>
                            <button 
                                className="action-menu__item"
                                onClick={() => {
                                    onCreateField(true);
                                    setIsOpen(false);
                                }}
                            >
                                <span className="icon">‚úèÔ∏è</span>
                                –°–æ–∑–¥–∞—Ç—å –ø–æ–ª–µ
                            </button>

                            <button 
                                className="action-menu__item"
                                onClick={() => {
                                    onAddNote(true);
                                    setIsOpen(false);
                                }}
                            >
                                <span className="icon">üìù</span>
                                –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É
                            </button>

                            <button 
                                className="action-menu__item"
                                onClick={() => fileInputRef.current.click()}
                            >
                                <span className="icon">üìÅ</span>
                                –ó–∞–≥—Ä—É–∑–∏—Ç—å Shapefile
                            </button>
                        </>
                    )}

                    {isCreatingField && (
                        <button 
                            className="action-menu__item action-menu__item--cancel"
                            onClick={onCancelField}
                        >
                            –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—è
                        </button>
                    )}

                    {isCreatingNote && (
                        <button 
                            className="action-menu__item action-menu__item--cancel"
                            onClick={onCancelNote}
                        >
                            –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏
                        </button>
                    )}
                </div>
            )}

            <input
                ref={fileInputRef}
                type="file"
                accept=".zip"
                onChange={handleFileUpload}
                style={{ display: 'none' }}
            />
        </div>
    );
} 