'use client'
import { useState, useEffect } from 'react'
import DatePicker, { registerLocale } from 'react-datepicker'
import "react-datepicker/dist/react-datepicker.css"
import ru from 'date-fns/locale/ru'  // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä—É—Å—Å–∫—É—é –ª–æ–∫–∞–ª—å
import '../scss/rateWorkerModal.scss'

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä—É—Å—Å–∫—É—é –ª–æ–∫–∞–ª—å
registerLocale('ru', ru)

export default function RateWorkerModal({ isOpen, onClose, onRate, worker, disabledDates }) {
    const [selectedDate, setSelectedDate] = useState(null)
    const [rateType, setRateType] = useState('like') // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ç–∏–ø–∞ –æ—Ü–µ–Ω–∫–∏
    const [existingRating, setExistingRating] = useState(null)

    // –ü—Ä–∏ –∫–∞–∂–¥–æ–º –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
    useEffect(() => {
        if (isOpen) {
            const now = new Date()
            const localDate = new Date(now.getTime() - (now.getTimezoneOffset() * 60000))
            setSelectedDate(localDate)
            setRateType('like') // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∏–ø –æ—Ü–µ–Ω–∫–∏ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏
            checkExistingRating(localDate)
        }
    }, [isOpen])

    const checkExistingRating = (date) => {
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º disabledDates –≤ –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ Date
        const disabledDateObjects = disabledDates?.map(d => new Date(d)) || []
        
        const exists = disabledDateObjects.find(disabledDate => {
            return date.getFullYear() === disabledDate.getFullYear() &&
                   date.getMonth() === disabledDate.getMonth() &&
                   date.getDate() === disabledDate.getDate()
        })
        setExistingRating(exists ? true : false)
    }

    const handleDateChange = (date) => {
        setSelectedDate(date)
        checkExistingRating(date)
    }

    const handleSubmit = async (e) => {
        e.preventDefault()
        try {
            const response = await fetch('/api/workers/rate', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    workerId: worker._id,
                    type: rateType,
                    date: selectedDate
                })
            })

            if (response.ok) {
                onClose()
                window.location.reload() // –í—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            }
        } catch (error) {
            console.error('Error submitting rating:', error)
        }
    }

    const handleDeleteRating = async () => {
        try {
            const response = await fetch('/api/workers/rate', {
                method: 'DELETE',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ 
                    workerId: worker._id,
                    date: selectedDate
                })
            })
            
            if (response.ok) {
                onClose()
                window.location.reload()
            }
        } catch (error) {
            console.error('Error deleting rating:', error)
        }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –æ—Ü–µ–Ω–∫–∞ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
    const isDateDisabled = (date) => {
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º disabledDates –≤ –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ Date
        const disabledDateObjects = disabledDates?.map(d => new Date(d)) || []
        
        return disabledDateObjects.some(disabledDate => {
            return date.getFullYear() === disabledDate.getFullYear() &&
                   date.getMonth() === disabledDate.getMonth() &&
                   date.getDate() === disabledDate.getDate()
        })
    }

    if (!isOpen || !selectedDate) return null

    return (
        <div className="modal">
            <div className="modal-content">
                <h2>–û—Ü–µ–Ω–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞</h2>
                <p>–°–æ—Ç—Ä—É–¥–Ω–∏–∫: {worker?.name}</p>
                
                <form onSubmit={handleSubmit}>
                    <div className="form-group">
                        <label>–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:</label>
                        <DatePicker
                            selected={selectedDate}
                            onChange={handleDateChange}
                            dateFormat="dd.MM.yyyy"
                            locale="ru"  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä—É—Å—Å–∫—É—é –ª–æ–∫–∞–ª—å
                            highlightDates={disabledDates?.map(d => new Date(d))}
                            dayClassName={date =>
                                isDateDisabled(date) ? "rated-date" : undefined
                            }
                            calendarClassName="custom-calendar"
                        />
                    </div>

                    {!existingRating ? (
                        <>
                            <div className="rate-buttons">
                                <button
                                    type="button"
                                    className={`rate-btn ${rateType === 'like' ? 'active' : ''}`}
                                    onClick={() => setRateType('like')}
                                >
                                    üëç –õ–∞–π–∫
                                </button>
                                <button
                                    type="button"
                                    className={`rate-btn ${rateType === 'dislike' ? 'active' : ''}`}
                                    onClick={() => setRateType('dislike')}
                                >
                                    üëé –î–∏–∑–ª–∞–π–∫
                                </button>
                            </div>

                            <div className="modal-actions">
                                <button type="submit">
                                    {rateType === 'like' ? '–ü–æ—Å—Ç–∞–≤–∏—Ç—å –ª–∞–π–∫' : '–ü–æ—Å—Ç–∞–≤–∏—Ç—å –¥–∏–∑–ª–∞–π–∫'}
                                </button>
                                <button type="button" onClick={onClose}>–û—Ç–º–µ–Ω–∞</button>
                            </div>
                        </>
                    ) : (
                        <div className="modal-actions">
                            <button 
                                type="button" 
                                className="delete-rating-btn"
                                onClick={handleDeleteRating}
                            >
                                –û—Ç–º–µ–Ω–∏—Ç—å –æ—Ü–µ–Ω–∫—É
                            </button>
                            <button type="button" onClick={onClose}>–ó–∞–∫—Ä—ã—Ç—å</button>
                        </div>
                    )}
                </form>
            </div>
        </div>
    )
} 