import dbConnet from "@/lib/db"
import Operations from '@/models/operations'
import Tech from '@/models/tech'
import { NextRequest, NextResponse } from "next/server"


export async function POST(req,res){
    await dbConnet()


    try{
        const {
            objectID, 
            date, 
            type, 
            description, 
            period, 
            beginDate, 
            periodMotor,
            executors,
            createdBy,
            usedParts
        } = await req.json();

        if(type === '–†–µ–º–æ–Ω—Ç'){
            const operationAdd = await Operations.create({
                objectID, 
                date, 
                type, 
                description,
                periodMotor,
                executors,
                createdBy,
                usedParts
            })
            return NextResponse.json(operationAdd)
        }
        else if(type === '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –û—Å–º–æ—Ç—Ä' || type === '–ù–∞–≤–∏–≥–∞—Ü–∏—è'){
            const operationAdd = await Operations.create({
                objectID, 
                date, 
                type, 
                description,
                executors
            })
            
            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—ä–µ–∫—Ç–µ
            const techObject = await Tech.findById(objectID)
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ–±—ä–µ–∫—Ç–∞
            const specialCategories = ['üöú –¢—Ä–∞–∫—Ç–æ—Ä–∞', 'üíß –û–ø—Ä—ã—Å–∫–∏–≤–∞—Ç–µ–ª–∏', 'üîÜ –ö–æ–º–±–∞–π–Ω—ã', 'üì¶ –ü–æ–≥—Ä—É—â–∏–∫–∏'] // –ö–æ–º–±–∞–π–Ω—ã, –û–ø—Ä—ã—Å–∫–∏–≤–∞—Ç–µ–ª–∏, –ü–æ–≥—Ä—É–∑—á–∏–∫–∏, –¢—Ä–∞–∫—Ç–æ—Ä–∞
            
            if (specialCategories.includes(techObject.catagory)) {
                // –î–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã —Ç–æ–π –∂–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                const updateAllSameCategory = await Tech.updateMany(
                    { catagory: techObject.catagory },
                    { $set: { inspection: { dateBegin: beginDate, period: period } } }
                )
            } else {
                // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–∏–π –æ–±—ä–µ–∫—Ç
                const editInspection = await Tech.findByIdAndUpdate(
                    { _id: objectID },
                    { $set: { inspection: { dateBegin: beginDate, period: period } } }
                )
            }
            
            return NextResponse.json(operationAdd)
        }
        else if(type === '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ'){
            const operationAdd = await Operations.create({
                objectID, 
                date, 
                type, 
                description, 
                periodMotor,
                executors
            })
            
            const editInspection =  await Tech.findByIdAndUpdate({_id:objectID},{$set:{maintance:{value:Number(periodMotor), period:period}}})
            
            return NextResponse.json(operationAdd)

        }
        
    }
    catch(e){   
        return NextResponse.json({ error: e.message }, { status: 500 })
    }

}