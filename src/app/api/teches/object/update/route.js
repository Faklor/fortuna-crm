import dbConnet from "@/lib/db"
import Tech from '@/models/tech'
import { NextResponse } from "next/server"
import path from 'path'
import fs from 'fs/promises'

export async function POST(req, res) {
    await dbConnet()

    try {
        const formData = await req.formData()
        const { _id, name, category, organization, description, captureWidth } = Object.fromEntries(formData)
        const imgTitle = formData.get('imgTitle')

        const updateData = {
            name,
            catagory: category,
            organization,
            description
        }

        if (category === 'üöÉ –ü—Ä–∏—Ü–µ–ø—ã') {
            const numericCaptureWidth = parseFloat(captureWidth);
            if (!isNaN(numericCaptureWidth)) {
                updateData.captureWidth = numericCaptureWidth;
            } else {
                updateData.captureWidth = 0;
            }
        } else {
            updateData.captureWidth = null;
        }

        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –æ–±—ä–µ–∫—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–∞–π–ª–∞
        const existingTech = await Tech.findById(_id)

        if (imgTitle && imgTitle !== 'null') {
            const byteLength = await imgTitle.arrayBuffer()
            const bufferData = Buffer.from(byteLength)
            
            // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É uploads/imgsObjects –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            const uploadsDir = path.join(process.cwd(), 'uploads', 'imgsObjects')
            await fs.mkdir(uploadsDir, { recursive: true })
            
            // –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
            const fileExtension = imgTitle.name.split('.').pop()
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º _id –æ–±—ä–µ–∫—Ç–∞ –∫–∞–∫ –∏–º—è —Ñ–∞–π–ª–∞
            const fileName = `${_id}.${fileExtension}`
            
            // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —ç—Ç–æ –Ω–µ Default.png
            if (existingTech?.icon?.fileName && existingTech.icon.fileName !== 'Default.png') {
                try {
                    await fs.unlink(path.join(process.cwd(), 'uploads', 'imgsObjects', existingTech.icon.fileName))
                } catch (error) {
                    console.error('Error deleting old file:', error)
                }
            }
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª
            await fs.writeFile(path.join(uploadsDir, fileName), bufferData)
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –≤ –ë–î
            updateData.icon = {
                fileName: fileName,
                contentType: imgTitle.type
            }
        }

        const updateTech = await Tech.findOneAndUpdate(
            { _id },
            { $set: updateData },
            { new: true }
        )

        if (updateTech) {
            return NextResponse.json({ newTech: updateTech })
        }

        return NextResponse.json({ error: 'Object not found' }, { status: 404 })

    } catch (e) {
        console.error('Update error:', e)
        return NextResponse.json({ error: e.message }, { status: 500 })
    }
}
  




